var searchIndex = {};
searchIndex['fixedvec'] = {"items":[[0,"","fixedvec","Heapless Vec implementation using only libcore",null,null],[3,"FixedVec","","",null,null],[3,"Iter","","",null,null],[4,"ErrorKind","","",null,null],[13,"NoSpace","","",0,null],[6,"Result","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"fixedvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FixedVec` from the provided slice, in the process taking\nownership of the slice.",1,null],[11,"capacity","","Returns the capacity of the vector.",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the vector. This will always be\nless than or equal to the `capacity()`.",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"usize"}}],[11,"available","","Returns the number of available elements in the vector. Adding more\nthan this number of elements (without removing some elements) will\ncause further calls to element-adding functions to fail.",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"bool"}}],[11,"as_slice","","Extracts a slice containing the entire vector.",1,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",1,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"},{"name":"t"}],"output":{"name":"result"}}],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"push","","Appends an element to the back of the vector.",1,{"inputs":[{"name":"fixedvec"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Removes the last element from the vector and returns it, or `None` if\nthe vector is empty",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"option"}}],[11,"push_all","","Copies all elements from slice `other` to this vector.",1,null],[11,"clear","","Clears the vector, removing all values.",1,{"inputs":[{"name":"fixedvec"}],"output":null}],[11,"map_in_place","","Applies the function `f` to all elements in the vector, mutating the\nvector in place.",1,{"inputs":[{"name":"fixedvec"},{"name":"f"}],"output":null}],[11,"iter","","Provides a forward iterator.",1,{"inputs":[{"name":"fixedvec"}],"output":{"name":"iter"}}],[11,"swap_remove","","Removes an element from anywhere in the vector and returns it,\nreplacing it with the last element.",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"resize","","Resizes the vector in-place so that `len()` is equal to `new_len`.",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"fixedvec"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive repeated elements in the vector in O(N) time.",1,{"inputs":[{"name":"fixedvec"}],"output":null}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"hash","","",1,{"inputs":[{"name":"fixedvec"},{"name":"h"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"fixedvec"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"fixedvec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"fixedvec"},{"name":"fixedvec"}],"output":{"name":"bool"}}],[14,"alloc_stack!","","Convenience macro for use with `FixedVec`. Allocates the specified number\nof elements of specified type on the stack.",null,null]],"paths":[[4,"ErrorKind"],[3,"FixedVec"],[3,"Iter"]]};
initSearch(searchIndex);
